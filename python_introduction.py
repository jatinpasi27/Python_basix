# -*- coding: utf-8 -*-
"""Python_Introduction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vfIEVgp_1LX6AoNKUuDorfS0ItPHDd2F

#**Print Statement.**#
"""

print("Here we are starting with python.")

print("Hello World!")
print("Python","is","an","interpreted",sep = "~",end = " Language")#sep is used to add a sign to seperate the words.

"""#**Variables**#"""

a = 21 # here a & b are variables which store some type of values in it.
print(a)
b = 2.43
print(b)

"""#**Data types**#

Data types can be refered to as varibles which store different types of values in it.
"""

from os import get_blocking
#Typecheck
a = 23
b = 34.54
c = "Machine learning"
d = True
e = 4.5454545454545545454
f = [5,64,3,6,26,2]
g = ("jatin","gaurav","nanu","bhoomi","shanvi","pihu")
h = {23,43,5,6,55,98}
print(type(a))
print(type(b))
print(type(c))
print(type(d))
print(type(e))
print(type(f))
print(type(g))
print(type(h))

"""#**Calculator**#"""

a = 12
b = 3
print("The addition of a & b are:",a+b)
print("The subtraction of a & b are:",a-b)
print("The multiplication of a & b are:",a*b)
print("The division of a & b are:",a/b)
print("The modulus of a & b are:",a%b)
print("The Floor division of a & b are:",a//b)

"""##**Type Conversion**##"""

a = 18
print(a)
print(float(a))

"""#**Escape Sequence**#"""

print("This is google colab") #here we are printing this sentence in one line.

print("This is google \ncolab") #here we are printing similar sentence in two diff lines using escape sequence.

print("This is google \tcolab") #here we are printing similar sentence by providing space using \t seq.

print("This is google \bcolab") #here we are printing similar sentence by del the space btw google and colab using \b sequence.

print("This is google \\colab") #here we are printing similar sentence by del the space btw google and colab using \b sequence.

print("This is google \"colab\"") #here we are printing similar sentence by del the space btw google and colab using \b sequence.

"""#**Control Statements**#

#**If else statement(Even odd)**#
"""

a =24
if(a%2==0):#Intendation should be kept in mind.
  print("a is an Even number.")
else:
  print("a is an Odd number.")

"""**Wap to check whether the number is greater than 50 or not and if greater then check whether it is even or not also check the same for odd number too.**"""

# num = 55
# if num > 50 :
#   print("The number is greater than 50.")
# else:
#   print("The number is smaller than 50")
num = 55
if num>50:
   if num %2==0:
    print("The number is greater than 50 and is even.")
   else:
    print("The number is greater but not even.")
else:
   if num %2!=0:
    print("The number is less than 50 and is odd.")
   else:
    print("The number is less than 50 but not odd.")

age = 34
if(age>=18):
  print("Candidate is eligible to vote.")
else:
  print("Candidate is not eligible to vote.")

"""**Adding elif statement in this.**




"""

a = 34
b = 34
if(a > b):
  print("A is greater than B.")

elif(b>a):
  print("B is greater than A.") #This is used to create a ladder of if-else statement.

else:
  print("Both are equal to each other.")

"""#**Area of a cube**"""

side = 25
area = side**2
print("The area of cube is:",area)

"""#**Taking input from user**#"""

a = input("Enter the number:") #here,its considering input as string by default, to avoid this we have to
print(a) #typecast it by int datatype so as to make it int input.

b = a+'4'#Here,Concatenation is helding to this o/p.
print(b)

"""##**Project 1**##"""

import time
time = time.strftime('%H:%M:%S')
print(time)

a = int(input("Enter the number:")) #here,its considering input as string by default, to avoid this we have to
print(a) #typecast it by int datatype so as to make it int input.
b = a+4
print(b)

a = int(input("Enter the num:"))
print(float(a)) #TYPE-CASTING

"""#**Swapping 2 numbers**#"""

num1 = int(input("Enter First number:"))
num2 = int(input("Enter second number:"))
temp = num1
num1 = num2
num2 = temp
print("The value of num1 is :",num1)
print("The value of num2 is :",num2)

"""#**Now, we'll learn about Strings.**#"""

n = "Hello"
print(n)
print("hello,"+n) #This is known as Concatenation.Where 2 strings are combined together.

lang = "cpp is an essential language for DSA."
for i in lang:
  print(i)

"""#**Some Operations on strings!**#"""

a = "Machine"
b = "learning"
c = "python is an easy language!!!"
d = "Dsa Is The Foundational Subject\n"
e = "pandas is a library"
f = " "

print(len(a))
print(a.islower())#checks whether the string is in lower-case.
print(a.isupper())
print(a.upper()) #converts string into upper case
print(a.lower())

print(c.replace("python","C++")) #used to replace the string by the new one(modification).

print(b.capitalize()) #used to capitalize the first letter of the string.

print(c.split()) #Creates a list of the given string if spaces are available.
print(c.split()[-2]) #Creates a list of the given string if spaces are available.

print(c.count("a")) #counts the freq of the given args in a string.

print(c.rstrip("!")) #removes the character present at the end of string.(post only)

print(c.endswith("!")) #checks whether the sentence or string ends with the same input.

print(c.endswith("is",4,29)) #same function but checks using slicing.

print(c.endswith("!",4,29)) #same function but checks using slicing.

print(c.startswith("python"))#case-sensative (checks the starting string comparing to input value.)

print(c.startswith("C++"))

print(c.find("is"))#calculates the first occurance of the string and returns the index value where it is stored.

print(c.find("easy"))

print(b.isalnum())#checks whether the string is alphanumeric or not.

print(c.isalnum())#c is not alphanumeric as it contains spaces btw it.

print(b.isalpha()) #determines only alphabets(a-z) [Non case-sensative].

print(c.isprintable())#determines whether the string can be printed or not.
#i.e if any specifier would be present it'll be considered as non-printable.

print(d.isprintable())#is non printable due to the presence of specifier in it.

print(f.isspace()) #checks only n only the space, seems useless.

print(e.istitle())#determines whether the first letter of every word is capital or not.

print(d.istitle())# since d has each n every word has first letter capital it is considered to be True.

print(e.title()) #capitalize first letter of each word.

print(a.swapcase())
print(b.swapcase()) #these both is used to swap the case.If upper then its converted into lower nd vice-versa.

"""##**Project 2: Building a Marksheet of 12th class Student.**##"""

name = input("Enter the name of the student:")
mat = int(input("Enter the marks in Maths:"))
phy = int(input("Enter the marks in Physics:"))
chem = int(input("Enter the marks in Chemistry:"))
eng = int(input("Enter the marks in English:"))
PE = int(input("Enter the marks in Physical Education:"))
total = mat+phy+chem+eng+PE
percentage = total/5
if(percentage<=100 and percentage>=90):
 print(name, "scored",percentage," Grade and secured 1st Division.")
elif(percentage>=60 and percentage<=89):
   print(name, "scored",percentage," Grade and secured 1st Division.")
elif(percentage>=50 and percentage<=59):
   print(name, "scored",percentage," Grade and secured 2nd Division.")
else:
   print(name, "Failed in examination.")

"""#**String Slicing**#"""

a = "Artificial"
print(a[0:7])
print("The length of the string is:",len(a))

b = "Intelligence"

print("The length of b is:",len(b))

print(b[0:6])

print(b[5:11])

print(b[0:len(b)-3])

print(b[0:-3]) #same as abv (KNOWN AS NEGATIVE SLICING)

print(b[-4:-2],"\n\n") #11-4 = 7

print(b)
print(b[-4:-5]) #this will not print due to wrogn assignment of slicing

print(b[-4:-3]) #The 2nd no should always be smaller than the firstone.

"""#**Control Statements**#

There are 3 types of control statements
* Looping = These statements allow a program to execute a block of code repeatedly.
->For loop=This comprises of initialization,condition and then termination(increment/decrement).
->While loop=This comprises of the initialization beforehand and then condition termination at the last of loop.
->Do-While loop=This is used to execute the loop at least once.


* Switch Case

#**FOR LOOP.**#
"""

#FOR LOOP.
a = 5
for i in range(1,a+1):
  print(i)

#Printing even num.
a = int(input("Enter the number:"))
for i in range(1,a+1):
  if(i%2==0):
    print(i)  #Intendation.

#For odd numbers:
a = int(input("Enter the num:"))
for i in range(1,a+1):
  if(i%2==1):
   print(i)  #Intendation.

#Printing numbers by jumping through addition of some specific number using third block of loop.
for i in range(1,20+1):
  print(i)

"""#**Table of any number.**#"""

#printing table of any number.
n = int(input("Enter the number:"))
for i in range(1,11):
  print(n,"x",i,"=",n*i)

"""#**WAP to swap two numbers if the first number is greater than the second number.**#"""

a = int (input ('Enter 1st number:'))
b = int (input ('Enter 1st number:'))
if(a>b):
  temp = a
  a = b
  b = temp
  print("The value of a is:",a)
  print("The value of b is:",b)

else:
  print("The value of a is:",a)
  print("The value of b is:",b)

"""#**Same values will have same memory location**#"""

a = 2
b = 4
c = 343
d = 343
print(c==d)
print(a is not b)  #Need to ask about it later onn...
print(c is not d)
print(c is  d)

a = 34
b = 33+1
print(a==b)
print(a is b)
print(hex(id(a)))  #Used for knowing memory location.
print(hex(id(b)))  #hexadecimal address

"""# Loop in strings"""

a = "Python"
for i in a:
  print(i)
  if(i=='t'):
    continue

"""#**Prime number**#"""

a = int(input("Enter the number:"))
for i in range(2,a):
  if(a%i==0):
    print("Not a Prime number")
    break
else:
  print("Prime Number")

"""#**Factorial**#"""

a = int(input("Enter the number:"))
fact = 1
for i in range(1,a+1):
  fact = fact*i
print("The factorial of",a,"is",fact)

"""**While Factorial**"""

n = int(input("Enter the number:"))
fact = 1
i = 1
while(i<=n):
  fact = fact*i
  i=i+1
print("The value of factorial",n,"is",fact)

"""#**Sum of Natural numbers.**#"""

from re import I
n= int(input("Enter the number till where you want the sum of natural no's:"))
sum = 0
for i in range(1,n+1):
  sum = sum+i
print("The sum of",n,"natural numbers are:",sum)

"""#**Multiplying 2 no's nd decrementing them untill 0 arises.**#"""

a = int(input("Enter the number:"))
b = int(input("Enter the number:"))
for i in range(a,1,-1):
  c = a*b
  print(a,'x',b,'=',c)
  a = a-1
  b = b-1

i= 1
while True:
  print(i)
  i +=1
  if(i%50==0):
    break

a = int(input("Enter the number:"))
b = int(input("Enter the number:"))
while(a and b>0):
  c = a*b
  print(a,'x',b,'=',c)
  a = a-1
  b = b-1

"""#**Prime number using while loop**#"""

a = int(input("Enter the number:"))
i=2
while(i!=a):
  if(a%i==0):
    print("Not a prime number..")
    break
  else:
    print("Is a prime number.")
    break

"""#**Sum of natural numbers using while loop**#"""

a = int(input("Enter the number:"))
i = 0
sum = 0
while(i!=a+1):
  sum = sum+i
  i += 1
print("The sum of",a,"natural no.s are",sum)

"""#**Factorial using while loop**#"""

a = int(input("Enter the number:"))
fact = 1
i = 1
while(i<=a):
  fact = fact*i
  i+=1
print("The factorial of",a,"is",fact)

"""#**WAP to check which number is greater**#"""

a = int(input("Enter the number a:"))
b = int(input("Enter the number b:"))
c = int(input("Enter the number c:"))

if(a > (b and c)):
  print("a is greatest number of all")
elif(b > (a and c)):
  print("b is greatest number of all")
else:
  print("c is greatest number of all")

"""##**Functions in Python**##

**using libraries**
"""

import pandas as pd
import numpy as np
a = [1,2,3,4,5,6,7,8,9,10]
print(type(a))
print(np.max(a))
print(np.sum(a))
print(np.min(a))

def square(a):
  sq = a*a
  return sq
b = square(2)
print(b)

def add(a,b): #function prototype!
  c = a + b
  print(c)     #function defination!

add(5,3)   #function call.

def islesser(a,b):
  if(a<b):
    print(a,"a is lesser.")
  else:
    print(b,"b is lesser.")
islesser(4,45)

def isgreater(j,k):
  pass

def isgreater(j,k):
  if(j>k):
   print(j,"j is greater.")
  else:
   print(k,"k is greater.")
isgreater(45654,4343)

def avg(a,b):   #Here, we are taking only 2 args.
  print("The avg is:",(a+b)/2)
avg(49,3)

def average(a =2 , b =4 ):    #These are required args.
  print("The avg is:",(a+b)/2)
average(5,10)   #ALSO CALLED DEFAULT ARGS.
#The output here is of 15 as the modified value is considered.

def avg(*num):#Here we can take multiple args nd accordingly it will ans the correct average of the given nums.
  sum = 0
  for i in num:
    sum = sum + i
    print("The avg is:",sum/len(num))
avg(4,3,12,1)

#Keyword args
def name(fname,mname,lname):
 print(type(name))
 print("HELLO!",fname,mname,lname)
name(mname = "shivaji", lname = "Maharaj",fname="Chattrapati")

def name(*name):
  print(type(name))
  print("Hello!",name[0],name[1],name[2])
name("Subhash","Chandra","Bose")

"""Keyword arbitrary arguments."""

def name(**name):
  print(type(name))
  print("Hello!",name["fname"],name["mname"],name["lname"])
name(mname = "Abdul",fname = "APJ",lname = "Kalam")

i = 0
while True:
  print(i)
  i = i+1
  if(i%50==0):
    break
  if(i==45):
    continue

"""#**Questions**#"""

def fun(n,l=[]):
  for i in range(n):
    l.append(i*i)
  print(l)
fun(2)

from google.colab import drive
drive.mount('/content/drive')

i =1
while True:
  if i%9==0:
    break
  print(i+4)
  i +=2

a = 'internshala'
print(len(a))
for i in range(len(a)):
  print(a)
  # a = 'z'

"""#**Wap to check whether the number is greater than 50 or not and if greater then check whether it is even or not also check the same for odd number too.**#"""

# num = 55
# if num > 50 :
#   print("The number is greater than 50.")
# else:
#   print("The number is smaller than 50")
num = 55
if num>50:
   if num %2==0:
    print("The number is greater than 50 and is even.")
   else:
    print("The number is greater but not even.")
else:
   if num %2!=0:
    print("The number is less than 50 and is odd.")
   else:
    print("The number is less than 50 but not odd.")

def fun(x,y):
  if x>y:
    return x
  elif x==y:
    return x,y
  else:
    return y
print(fun(20,30))

"""#**Finding out number of combination using simple method and then using functions**#"""

n =10
r =6

fact_n =1
for i in range(1,n+1):
  fact_n = fact_n*i

fact_r =1
for i in range(1,r+1):
  fact_r = fact_r*i

fact_n_r =1
for i in range(1,(n-r)+1):
  fact_n_r = fact_n_r*i

result = fact_n/(fact_r * (fact_n_r))
print("Number of combination:",result)

"""*Using function*"""

#NOW USING FUNCTION
def factorial(para):
  fact = 1
  for i in range(1,para + 1):
    fact = fact * i
  return fact #Intendation should be followed to get the desired output.
n = 10
r = 6
result = factorial(n)/(factorial(r)*(factorial(n-r)))
print("Number of combination",result)

"""#**List in Python**#"""

l = [2,3,4,45,34,'college','school','industry',34]

print(l) #1st method of printing list.

print(l[:]) #consider index 0 on the left side of the colon. And prints the whole list.

print(l[0:9]) #slicing.

print(len(l)) #Finds out the size of list.

print(type(l))
#SINCE LISTS ARE MUTABLE IN NATURE WHICH MEANS WE CAN MODIFY IT.

l.append(23) #Modification.
print(l)

"""*Negative Indexing.*"""

print(l[:])
print(len(l))
print(l[0:-3])
print(l[1:-3])
print(l[-6:-3]) #Negative Indexing.

print(l[len(l)-6:len(l)-3]) #Easier representation.

print(l[4:7])  #Conversion into Positive Indexing.

"""*CHECKING ELEMENTS IN A LIST.*"""

#CONSIDERING THE SAME LIST GIVEN AVB.
if 3 in l:      #This is how we can easily check whether the element is present in the list or  not.
  print("Yes")
else:
  print("No")


if 7 in l:
  print('Yes')
else:
  print('No')

if 'school' in l:  #Same appraoch is used in string element as well.
  print('Yes')
else:
  print('No')

if 'chool' in 'school':
  print('yes')
else:
  print('No')

if 'chol' in 'school':
  print('yes')
else:
  print('No')

"""**JumpIndexing in list**"""

list = [23,54,'DataScience','MachineLearning',34,56,77,88,44,98]
print(list)
print(len(list))
print(list[0:9:2])
print(list[0:10:5]) #Using the 3rd block of slicing brackets we can jumpover the certain numbers through which we wish to.

"""#**List Comprehension**#"""

#LIST COMPREHENSION
lst = [i for i in range(4)]
print(lst)

list = [i*i for i in range(10)] #Here the seq is till 10 excluding 10. and the squares of the numbers are printed.
print(list[1:])

list1 = [i*i for i in range(10) if i%2==0 ]
print(list1)
print(list1[1:]) #list slicing is used to initiate from the 1st index.

"""**List Manipulation Methods**"""

a = [1,332,443,34,23,1,8]
print(len(a))
print(a)

a.append(65)  #Adds an element in the list.

print(a)

a.sort()  #Used to sort the elements in a list.

print(a)

a.sort(reverse= True ) #Sort the list in descending order.

print(a)

a.reverse()  #reverses the elements of the list

print(a)

#As the operations are held in a list the updation takes place on each operation.


print(a.index(332)) #Tells about the index no of the particular value.

print(a.index(8))

print(a.count(1)) #calculates the freq of the element in a list.
#SUPPOSE A NEW LIST.

# m = a
# m[0] = 0  #This changes the element of list a too.
# print(a)

m = a.copy() #generated a copy of the list.

print(m)

a.insert(5,566) #inserts 566 to the 5th index and shifts the other towards right side.

print(a)

list1 = [400,5000,6500]

a.extend(list1)  #This adds the elements of new list in the earlier list.

print(a)

"""**List Concatenation**"""

m = a + list1
print(m)
#THIS IS HOW LIST CONCATENATION IS DONE.

"""#**Tuples**#
**Tuples are similar to list.The only difference is that tuples are non-mutable.**
"""

t = (1,2,43,54,655,66,'orange','mango')
tup = (2)
print(type(tup))
print(type(t))
print(t)
print(len(t))

#Slicing in tuple
print(t[:])
print(t[0:5])

print(t[len(t)-3:len(t)-1])
print(t[-3:-1])

#Checking
if 655 in t:
  print("yes")
else:
  print("no")

if 55 in t:
  print("yes")
else:
  print("no")

"""**Methods in tuple**

->Tuple are immutable in nature.So, if we want to modify them there is only one way (i.e indirect) to do so and that is copying the elements of tuple in the list and then modify it.
"""

fruits = ('Mango','Banana','Litchi','Guava')
temp = list(fruits)
#Since, the tuple is converted into list.Hence, all the operations of the list can be performed here.
print(temp)
temp.append(34)
temp.append('Grapes')
print(temp)
temp.pop(3) #The element in index number 3 is removed from the list.
print(temp)
temp[2] = 'Dolphin'
print(temp)

"""**Sorting list using loops**

###### Today we will start learing python and further we'll look into data analytics and machine learning.
"""

print("Hello World!")

#This is how we can easily write any equation in jupyter notebook $a = b + c$

$a=b+c$

print("Lets start Python")

"""# Variables
A Variable can be understood as a container which can store different kind of data such as integer number,decimal number or string.
Conventions:-

1. Cannot start with any special character or numeric value except underscore.
2. Always should be bit descriptive so as to be used as indication for what kind of data is stored in it.
3. Ex-- a,b,c shouldn't be used to store any kind of data during project building.
4. Camel Notation-> This is the best way of naming a variable. This means the first letter of the second word should be Capital.
ex-> MinValue
"""

a =4

# Commented out IPython magic to ensure Python compatibility.
# %whos

x = 45
y = 77
x = 3

# Commented out IPython magic to ensure Python compatibility.
# %whos

a,b,c,d,e = 23,43,55,7.9,44

# Commented out IPython magic to ensure Python compatibility.
# %whos

del c
del d

# Commented out IPython magic to ensure Python compatibility.
# %whos

#print d will throw an error as the variable c and d has been deleted above

com = 5 + 8j
print(type(com))

# Commented out IPython magic to ensure Python compatibility.
# %whos

"""# string variable"""

s  = "Hello World"
print(s)
print(type(s))

# Commented out IPython magic to ensure Python compatibility.
# %whos

"""# Variable and Operators"""

a = 5
b = 20
print("The addition of",a,"and",b,"is",(a+b))
print("The subtraction of",a,"and",b,"is",(a-b))
print("The multiplication of",a,"and",b,"is",(a*b))
print("The division of",a,"and",b,"is",(a/b))
print("The Floor Division of",a,"and",b,"is",(a//b))
print("The Modulus of",a,"and",b,"is",(a%b))
print("The Power of",a,"and",b,"is",(a**b))

# Commented out IPython magic to ensure Python compatibility.
# %whos

n1 = 34
n2 = 45.76
print(n1+n2)
print(type(n1+n2))

v = ((n1+n2)**3)//4
print(v)

s1 = "Hello"
s2 = " World"
sum = s1+s2
print(sum)

10//3 #Floor Division

10/3

_e = 76.4
print(_e)

minValue = 27

# Commented out IPython magic to ensure Python compatibility.
# %whos

"""# Type bool and Comparision of the variables"""

a = True
b = True
c = False

# Commented out IPython magic to ensure Python compatibility.
# %whos

print(a and b)

print(a and c)
print(c and a)

d = (a or b)
print(d)
print(a or c)
print(c or a)
print(a and d)
print(c and d)

"""Bool which consist not as prefix(not opposes the bool)"""

not(a)

not(b)

not(c)

t = not(d)
print(t)
print(type(d))

not(a and b) or (c or d)

"""Combine the boolean data

# Comparisions
"""

print(2<3)

c = 2<3
print(type(c))
print(c)

d = 3 ==4
print(d)
print(type(d))

x = 4
y = 9
z = 8.7
r =-3

(x<y) and (z<y) or (r == x)

False and False or True

(True or False) and False

print((not(2!=3) and True) or (False and True))

"""# Important Functions
Its a built in function from the language that is supplied to the users to achieve particular task.

Round Function--> Used to round the input value to a specified number of places or to the nearest integer.
"""

round(45.64)

round(45.4)

round(45.5)

round(4.546,2) #This makes the second place after decimal number.

round(6.8)

"""Divmod Function-->This function outputs the quotient and the remainder in a tuple()."""

divmod(27,4)

divmod(22,11)

divmod(87,5)

a = divmod(23,5)
print(type(a))
print(a)

print(a[0])
print(a[1])

# Commented out IPython magic to ensure Python compatibility.
# %whos

"""IsInstance function--> Returns true, if the first arguement of the class. Multiple classes can also be checked at once."""

isinstance(2,int)

isinstance(23.4,float)

isinstance(23+8j,(int,float ,str))
#Since we didnt check complex number in this particular tuple.Therefore the result is false

isinstance(23+8j,(int,float ,str,complex))

"""Power Function

Here the third arguement calculates the modulus with the result of first two arguements.
"""

pow(2,3)

pow(2,4)

2**4

pow(2,4,7)

pow(5,3,5)

"""Input Function"""

a = input("Enter the number:")
print(a)
print(type(a))
#Here the variable a stores 45 as string.

num = int(input("Enter the number:"))
print(num)
print(type(num))

"""# Here are some ways by which you can easily know about any function in python.

"""

help(pow)

pow??

help(isinstance)

"""# Control Flow in Python"""

a = int(input("Enter the number 1:"))
b = int(input("Enter the number 2:"))
if(a>b):
    print(a)
if(b>a):
    print(b)

a = int(input("Enter the number 1:"))
b = int(input("Enter the number 2:"))
if(a>b):
    # print(a)
    print("a is greater than b")
else:
    print("b is greater than a")

a = float(input("Enter the 1st number:"))
a = float(input("Enter the 2nd number:"))
if b>a:
    print("b is greater than a.")
elif a==b:
    print("Both a and b are equal.")
else:
    print("a is greater than b")

"""Example:

"""

a = int(input("Enter the marks:"))
if a>=85:
    print("A Grade")
elif (a < 85) and (a >= 80):
    print("A- Grade")
elif (a<80 ) and (a>=75):
    print("B Grade")
elif a<75 and a >= 70:
    print("B- Grade")
else:
    print("Below Average")

"""Implementation of else part using elif keyword."""

a = 3
if a > 10:
    print(">10")
elif not(a>10):
    print("Else Part")

"""Nested If"""

a = int(input("Enter the number:"))
if a>10:
    print("The number is greater than 10")
    if a<15:
        print("The number is greater than 10 but smaller than 15")
    else:
        print("The number is greater than 10 and 15 both")

"""# Very important code to understand nested if and else conditions."""

a = int(input("Enter the number:"))
if a>10:
    print(">10")
    print("Inside the top if.")
    if a>20:
        print(">20")
        print("Inside the nested if.")
        if a>30:
            print("inside the nested if of nested if.")
        else:
            print("<=30")
            print("Inside the else part of nested if of nested if.")
    else:
        print("<=20")
        print("Inside the else part of nested if.")

print("Outside all ifs")

"""Comments"""

#single line comment
"""
 User will enter a floating point number lets say 238.95.Your task
is to find out the integer portion before the point
(in this case 238) and then check if that integer portion is an even number or not?

"""
x = float(input("Enter a real number:"))
y = round(x) # helps??
if y>x:
    intPortion = y-1 # 29.6

else:
     intPortion = y
print(intPortion)

#This is second approach of the above code.
x = float(input("Enter a real number:"))
# y = round(x) # helps??
if x>0:
    print(int(x))

else:
    print(x)
# print(intPortion)

"""# Small project which is build using input func if-elif and else condition"""

mat = int(input("Enter the marks of maths:"))
chem = int(input("Enter the marks of chemistry:"))
phy = int(input("Enter the marks of physics:"))
eng = int(input("Enter the marks of english:"))
PE = int(input("Enter the marks of Physical Education:"))
totalMarks = mat+eng+phy+chem+PE
percentage = (totalMarks)/500*100
print("The Percentage of the candidate is:",percentage)
if (percentage<50):
    print("Student passed aquiring C Grade.")
elif(percentage > 50 and percentage <= 60):
    print("Student passed aquiring C+ Grade.")
elif(percentage > 60 and percentage <= 70):
    print("Student passed aquiring B Grade.")
elif(percentage > 70 and percentage <= 80):
    print("Student passed aquiring B+ Grade.")
elif(percentage > 80 and percentage <= 90):
    print("Student passed aquiring A Grade.")
elif(percentage > 90 and percentage <= 100):
    print("Student passed aquiring A+ Grade.")
else:
    print("Student failed in the examination.")
print("\n")
print("DONE")

"""# Loops

While Loop.
"""

n = int(input("Enter the number:"))
i = 1
while(i<n):
    print(i)
    # i = i+1
    i += 1

print("Done")

"""* Printing Even numbers"""

n = int(input("Enter the number:"))
i = 1
while(i<=n):
    if(i%2==0):
        print(i)
    i += 1
print("Done")

"""* Printing the odd numbers"""

n = int(input("Enter the number:"))
i = 1
while(i<=n):
    if(i%2==1):
        print(i)
    i += 1
print("Done")

"""* Printing numbers which are divisible by 3 and 5 both."""

a =  int(input("Enter the number:"))
i  = 1
while(i<=a):
    if(i%3==0 and i%5==0):
        print(f"The number",i,"is divisible by both 3 and 5")
    i += 1
print("Done")

"""* Print Tables"""

a = int(input("Enter the number whose table is to be printed:"))
i = 1
while(i<=10):
    print(a,"X",i,"=",a*i)
    i += 1
print("Done")

"""* Printing the sum of the product of full table."""

a = int(input("Enter the number whose table's sum is to be printed:"))
i = 1
sum = 0
while(i<=10):
    pro = a*i
    sum = sum + pro
    i += 1
print(sum)

a = int(input("Enter the number from where you have to start the range:"))
b = int(input("Enter the number from where you have to end the range:"))
i = a
while(i<=b):
    print(i)
    i+=1
print("DONE")

#PRINTING EVEN NUMBERS WHICH LIE BTW THE DEFINITE RANGE.
a = int(input("Enter the number from where you have to start the range:"))
b = int(input("Enter the number from where you have to end the range:"))
i = a
while(i<=b):
    if i%2==0:
     print(i)
    i+=1
print("DONE")

"""Printing Factorial of a given number using while loop."""

n = int(input("Enter the number:"))
i = 1
fact = 1
while(i<=n):
    fact = fact * i
    i +=1
print(f"The factorial of the given {n} is:{fact}")
print("DONE")

"""# For Loop

"""

n = int(input("Enter the number:"))
for i in range(1,n+1):
    print(i)
print("DONE")

n = int(input("Enter the number:"))
for i in range(1,n+1):
    #printing even number
    if(i%2==0):
        print(i)
print("DONE")

"""Printing tables using for loop

"""

n = int(input("Enter the number whose table is to be printed:"))
for i in range(1,11):
    pro = i*n
    print(f"{n}X{i}={pro}")
print("DONE")

"""Printing products which are Even in nature."""

n = int(input("Enter the number whose table is to be printed:"))
for i in range(1,11):
    pro = i*n
    if(pro%2==0):
     print(f"{n}X{i}={pro}")
print("DONE")

"""Printing Factorial of any number."""

n = int(input("Enter the number whose factorial is to be found:"))
fact = 1
for i in range(1,n+1):
    fact = fact*i
print(f"The factorial of given number is {fact}")
print("DONE")

"""# Printing numbers using loop in reverse order."""

n = int(input("Enter the number:"))
i = n
while(i>0):
    print(f"The number is:{i}")
    i-=1
print("DONE")

"""Printing even number is reverse order."""

n = int(input("Enter the number:"))
i = n
while(i>0):
    if(i%2==0):
     print(f"The number is:{i}")
    i-=1
print("DONE")

"""Printing odd numbers in reverse order."""

n = int(input("Enter the number:"))
i = n
while(i>0):
    if(i%2==1):
     print(f"The number is:{i}")
    i-=1
print("DONE")

"""# Break and Continue Statement

n = int(input("Enter the number:"))
i = 1
while(i<n):
    if i%2==0:
        print(i)
    else:
        pass  #THIS MEANS TO DO NOTHING OR SKIP IF THE ELSE STATEMENT TRIGGERS.
    i += 1
print("DONE")
"""



n = int(input("Enter the number:"))
i =1
while True:
    # print(i)
    if i % 9 == 0:
       print("inside if")
       break
    else:
        print("inside else")
        i = i+1
print("DONE")

n = 10
i = 1
while(True):
    if i%9 != 0:
        print("Inside if")
        i += 1
        continue
    print("Something")
    print("SomethingElse")
    break
print("DONE")

"""Control Flow For Loop"""

l = []
for i in range(0,10,2):
    print(i)
    l.append(i**2)
print(l)

"""Else in For Loop."""

s = {"orange",5.6,"mango"}
x = 1
for i in s:
    print(i)
    x+=1
    if x == 3:
        break
    else:
        pass
else:
    print("Loop conpletes its iterations")

print("OUtside the loop")
print(x)
print(type(s))

d = {"mango":44,"orange":-19,"c":"abc"}
for x in d:
    print(x,d[x])
print(d["mango"])

"""* Given a list of numbers i.e [1,2,4,-5,7,9,3,2] ,make another list that contains all the items in sorted order from min to max. i.e your result will be another list like [-5,1,2,2,3,3,7,9]"""

lst =  [1,2,4,-5,7,9,3,2]
# lst1 = []
for j in range(len(lst)): #7
    m = lst[j]
    idx = j
    c = j
    for i in range(j,len(lst)):
        if lst[i]<m:
            m = lst[i]
            idx = c
        c += 1
    temp = lst[j]
    lst[j]= m
    lst[idx]=temp
print(lst)

"""# Functions in Python"""

def PrintSuccess():
    print("I am Done.")
    print("Send me another task.")

PrintSuccess() #this is how we call any function.

"""* The docstring allows us to write the description of the function but will never be executed. But it will always be available whenever uh need it."""

def printSuccess2():
    """ This function is doing nothing except printing a message.
    That message is "hello and this is my first time to use doc string in functions."
    """
    print("hello")

printSuccess2??

len??

help(printSuccess2)

printSuccess2()

"""* Functions Input Arguements."""

def printMessage(msg):
    print(msg)
printMessage("Integrity")

def add(a,b):
    res = a+b
    print(f"The addition of {a} and {b} are {res}.")

add(b=56,a=4)

def printMsg(msg):
    """The function prints the message supplied by the user or prints that msg
    is not in the form of string."""
    if isinstance(msg, str):
        print(msg)
    else:
        print(F"your input argument is not a string")
        print(f"Here is the type what you have given as an argument{type(msg)}.")

printMsg("resilient")
printMsg(56)

help(printMsg)

printMsg??

y = 55656
x="MachineLearning"
printMsg(y)
printMsg(x)

"""* Multiple input arguements in python.(Functions)"""

def mypow(a,b):
    """This function computes the power just like the built in function."""
    c = a**b
    print(c)

mypow??

help(mypow)

mypow(3,2)

"""Multiple args more than 2 args in a function or method."""

def chkTypes(a,b,c):
    """The function checks the datatypes of the inputs whether its giving the expected o/p or not.
    """
    if isinstance(a,(int,float)) and isinstance(b,(int,float)) and isinstance(c,(int,float)):
        print((a+b+c)**2)
    else:
        print("Error: the input argss are not of the expected types.")

chkTypes(4,2,3)

chkTypes(4,65,'association')

chkTypes(4,65)

chkTypes(4,65,3,54)

"""* Ordering Multiple args in the function input."""

def f(a,b,c):
    print("A is:",a)
    print("B is:",b)
    print("C is:",c)
f(2,3,"xbox")

#Changing order.
f("box",3,4)

f(c = "game",a=2,b=3)

"""* Output args and return type in Functions."""

# def add(x,y):
#  sumVal = x + y
#  # print(sum)
# add(3,8)
# print(sumVal)

def add(x,y):
  sumVal = x + y
  # print(sum)
  return sumVal
d = add(3,8)
print(f"The sum is:{d}")

"""* Local variable is given much more priority for being accessed rather than Global variable.
* Function in python always return something if not the specified return then it will return None.
"""

varOutside = 2

def g():
    varOutside = 5
    # print(varOutside)
    # return varOutside

print(type(g()))

print(varOutside)

def h():
    print('A')
    a = 3
    b = 4
    c = a+b
    print("something")
    print(c)
    return  c  # WORKS AS A BREAK STATEMENT WHICH IS USED TO RETURN VALUE INTO THE FUNCTION.
    print("B")
    print("C")

print(type(h()))
print(h())  #Return the value of addition performed on the function.

def res():
    a =4
    b = 7
    c = "Done"
    return  a,b,c

x,y,z  = res()
print(x,y,z)

"""* Taking n number of inputs in a function as a parameter."""

def add(*args):
    sum = 0
    for i in range(len(args)):
        sum += args[i]
    return sum

print(add(3,4,5,2,12,343))

def names(*args):
    for i in args:
        print(i)
names("jatin","gaurav","nanu","pihu")

"""* Variable number of input args using ** as the parameter."""

def printAllVariableNames(**args):
    for i in args:
        print("Variable name is:",i,"and value is:",args[i])

printAllVariableNames(a = 2,b = 'B',c = "ccc",y= 6.5)

def Student(**kwargs):
    for name,id in kwargs.items():
      print(f"{name}:{id}")

s1 = Student(name = "Ramu",id = 4)
s2 = Student(id = 5,name = "Raj")
# s3 = Student("uvaish",8)

"""* Default Values in Functions."""

#default values are the values which are given to a input when defining a function.

def gg(s=4):
    print(s)

gg()

gg(34)

l = [1,2,3,4]
l1 = l
l1[0] = -9
print(l)

def ff(l=[1,2]):
    for i in l:
        print(i)

l2 = [32,12,3]
ff()

ff()

ff(l2)

"""* Making modules in Python."""

def add(x,y):
  sumVal = x + y
  # print(sum)
  return sumVal
d = add(3,8)
print(f"The sum is:{d}")

import sys
sys.path.append('D:\python files')

import PYTHON_BAISCS2 as myfls

"""# Sorting list in Python

* Given a list of numbers i.e [1,2,4,-5,7,9,3,2] ,make another list that contains all the items in sorted order from min to max. i.e your result will be another list like [-5,1,2,2,3,3,7,9]
"""

lst =  [0,-8,5,23,76,7,53]
# lst1 = []
for j in range(len(lst)): #7
    m = lst[j]
    idx = j
    c = j
    for i in range(j,len(lst)):
        if lst[i]<m:
            m = lst[i]
            idx = c
        c += 1
    temp = lst[j]
    lst[j]= m
    lst[idx]=temp
print(lst)

def FindMin(L):
    m = L[0]
    idx = 0
    i = 0
    for x in L:
        if x<m:
            m = x
            idx = i
        else:
            pass
        i+=1
        return m,idx
a,b = FindMin([333,34,54,3,4,6,7])
print(a,b)

lst = [4,34,54,-2,43,54]
for i in range(len(lst)):
    m = lst[i]
    idx = i
    c = i
    for j in range(i,len(lst)):
        if lst[j]<m:
            m = lst[j]
            idx = c
        c += 1
    temp = lst[i]
    lst[i] = m
    lst

def swapValues(lst,idx1,idx2):
    temp = lst[idx1]
    lst[idx1] = lst[idx2]
    lst[idx2]= temp
    return lst
lst = [1,2,45,6,78,76]
res = swapValues(lst,1,3)
print(res)

'''def sortList(L):
    c = 0
    for i in L:
        m,idx = findMIn(L)
        L  = swapValues(L,c,idx)
        c += 1
    return L

print(L)'''

"""* This is a Module we made in another notebook and imported it here but due to some reasons its not working."""

def checkIfNotNumeric(*args):
    for i in args:
        if not(isinstance(i,(int,float))):
            return False
    return True

"""# Strings In Python"""

v = "Python is language"
s = "We are going to learn its framework i.e Django"
print(v+' and, '+s)

res = v+'OOPS CONCEPT'+s
print(res)

'''pri = 12
s = "The price of this book"
v = s+ 'is: '+ str(pri)
print(v)'''

"""* STRING SLICING"""

a = "Programming."
for i in enumerate(a):
    print(i)
print(a[3:9])
print(len(a))
print(len(a[2:5]))
print(a[3:-5])
print(a[5:-3])
print(a[::-1])

a = "Artificial"
print(a[0:7])
print("The length of the string is:",len(a))

b = "Intelligence"

print("The length of b is:",len(b))

print(b[0:6])

print(b[5:11])
#NEGATIVE INDEXING
print(b[0:len(b)-3])

print(b[0:-3]) #same as abv (KNOWN AS NEGATIVE SLICING)

print(b[-4:-2],"\n\n") #11-4 = 7

print(b)
print(b[-4:-5]) #this will not print due to wrogn assignment of slicing

print(b[-4:-3]) #The 2nd no should always be smaller than the firstone.

"""* Some Functions of String"""

a = "   abc def    hg; assgsdf    "
b = a.strip()
print(b)

a = "   fjroirjeijroiejfdsfjv      "  #removes the spaces before and after the string ends and prints the actual string
print(a.strip())

a = "JATINPASIJFEOIFJEOIJFOERIJFOIERJF"
'''converts all the upper case characters into Lowercase characters.'''
print(a.lower())

a = "herewearelearningpythonbasics"
'''converts all the lowercase characters into upper case characters.'''
print(a.upper())

a = "Here are we."
print(a.istitle())
print(a.replace("are","were"))
print(a.replace('.'," sitting."))

a = "Machine"
b = "learning"
c = "python is an easy language!!!"
d = "Dsa Is The Foundational Subject\n"
e = "pandas is a library"
f = " "

print(len(a))
print(a.islower())#checks whether the string is in lower-case.
print(a.isupper())
print(a.upper()) #converts string into upper case
print(a.lower())

print(c.replace("python","C++")) #used to replace the string by the new one(modification).

print(b.capitalize()) #used to capitalize the first letter of the string.

print(c.split()) #Creates a list of the given string if spaces are available.
print(c.split()[-2]) #Creates a list of the given string if spaces are available.

print(c.count("a")) #counts the freq of the given args in a string.

print(c.rstrip("!")) #removes the character present at the end of string.(post only)

print(c.endswith("!")) #checks whether the sentence or string ends with the same input.

print(c.endswith("is",4,29)) #same function but checks using slicing.

print(c.endswith("!",4,29)) #same function but checks using slicing.

print(c.startswith("python"))#case-sensative (checks the starting string comparing to input value.)

print(c.startswith("C++"))

print(c.find("is"))#calculates the first occurance of the string and returns the index value where it is stored.

print(c.find("easy"))

print(b.isalnum())#checks whether the string is alphanumeric or not.

print(c.isalnum())#c is not alphanumeric as it contains spaces btw it.

print(b.isalpha()) #determines only alphabets(a-z) [Non case-sensative].

print(c.isprintable())#determines whether the string can be printed or not.
#i.e if any specifier would be present it'll be considered as non-printable.

print(d.isprintable())#is non printable due to the presence of specifier in it.

print(f.isspace()) #checks only n only the space, seems useless.

print(e.istitle())#determines whether the first letter of every word is capital or not.

print(d.istitle())# since d has each n every word has first letter capital it is considered to be True.

print(e.title()) #capitalize first letter of each word.

print(a.swapcase())
print(b.swapcase()) #these both is used to swap the case.If upper then its converted into lower nd vice-versa.

a = "today is day 2 of learning python"
l = a.split(" ")
print(l)

print(l[0],l[1])

a??

a.capitalize?

a.upper?

a.capitalize()

a.count??

print(a.count('j'))

a = "Today is day 3 of learning python"
print('it' in a)
print('is' in a)

"abc" =="abc"

"abc"<"def"

"jatin pasi" not in "gaurav"

print("we are learning "string" here")

"""* ESCAPE SEQUENCE."""

print("we are learning \"string\" here")

print('we are learning "string" here')

print("we are \nnow on another line.")

print("c:\name\drive")

"""# Data Structures in Python."""

l = [1,2,4,55,'name',34.66,6,7,8]
tup= (1,2,4,5,'id',34.433,True)
dict = {'name':'jatin','age':20,'Branch':'AIML','sem':5}
s  = {1,2,4,5,6}
l2 = set(l)
print(type(l))
print(type(tup))
print(type(dict))
print(type(s))
print(l2)

l = [1,2,4,5,'name',6]
print(l[1:4])  #SLICING.

"""# Some function in list."""

#Functions which are used to add an elements in a list.
l = [1,2,4,5,6,7,8,89,'name']
l.append(434)
print(l)
l.insert(4,300) #FIRST THE INDEX SHOULD BE MENTIONED.
print(l)
l2 = ['dict','tuple','set','list']
l.extend(l2) #concatinates two lists.
print(l)

# SOME FUNCTIONS TO REMOVE OR DELETE THE ELEMENTS FROM THE LIS.
l = [1,2,4455,23,545,65,98]
l.remove(2)  #REMOVES THE SPECIFIC ELEMENT FROM THE LIST.
print(l)
l.pop()  # REMOVES THE TOP ELEMENT FROM THE LIST.
print(l)
l.clear()  # CLEARS THE WHOLE LIST AND MAKE IT NULL.
print(l)

"""* More important Functions for arranging the list."""

l = [1,2,4455,2,2,2,23,545,65,98,545,65,98]
l.sort() #SORTS THE LIST IN ASSENDING ORDER.
print(l)
l.reverse()  #REVERSES THE LIST.
print(l)
print(l.count(2))
print(l.count(545))
print(l.count(98))
print(l.count(1))

d = {'oldkey':'oldValue','name':'smarath'}
print(d)
del d['oldkey']  #del IS A DESTRUCTOR IN PYTHON AND INIT IS THE CONSTRUCTOR.
print(d)

"""* WAP when given 2 lists find the common elements in btw."""

size = int(input("Enter the size of the list:"))
lst = []
for i in range(size):
    ele = input(f"Enter the {i}th element:")
    lst.append(ele)
size2 = int(input("Enter the size of the list2:"))
lst2 = []
for j in range(size2):
    ele2 = input(f"Enter the {j}th element:")
    lst.append(ele2)
# print(lst)
lst3=[]
for c in lst:
    for d in lst2:
        if(d==c):
            lst3.append(d)
print(lst3)

lst = [1,2,3,4,5,6]
lst1 = [2,4,6,7,8,9]
lst2= []
for i in lst:
    for j in lst1:
        if(i==j):
           lst2.append(i)
print(lst2)



"""# Strings"""

my_str = 'Hello'
my_str2 = "hello"
my_str3 = """hello"""
print(my_str,my_str2,my_str3)

my_str = input("Enter your name:")
print(my_str)

"""# string slicing"""

my_str = "hello, ready to explore python!!"
#[starting pnt : ending : step]
print(my_str[4:16:2])# o ed o
print(my_str[12:30])# to explore python
print(my_str[:10])#0-9 index will execute.
print(my_str[::-1])
print(my_str.split(' '))
print(my_str.split('o'))

print(my_str.split('l'))

"""WAP to count the number of words in a given string"""

my_str = "how are you jatin"
space_count = 1
for i in my_str:
    if (i== " "):
     space_count +=1
print(f"The number of words are:{space_count}")

# my_str = "how are you jatin"
# my_str2 = my_str.split(' ')
# my_set = set(my_str2)
# space_count = 1
# for i in my_set:

#      space_count +=1
# print(f"The number of words are:{space_count}")

"""2. WAP to reverse a given string withoyut using slicing or inbuilt techniques.
3. METHOD =1
"""

my_str = input("Enter the string:")
n = len(my_str)
print(type(my_str))
rev_str = ""
for i in range(n-1,-1,-1):
    rev_str += my_str[i]
print(rev_str)
print(type(rev_str))

print("DONE")

my_str = "Python"
my_list = list(my_str)
i = 0
j = len(my_str)-1
while(i<=j):
   my_list[i],my_list[j] = my_list[j],my_list[i]
   i+=1
   j-=1
# rev_str = str(my_list)
# print(rev_str)
print(str(my_list))

"""WAP to count the number of duplicates in a given string.

"""

str1 = "Python Programming"
count = 0
for j in str1:
    for i in str1:
            if(j==i):
              count+=1
print(f"No. of duplicates:{count-len(str1)}")

str1 = "Python Programming"
count = 0
for i in range(0,len(str1)):
    for j in range(0,len(str1)):
        if(i==j):
            continue
        elif(str1[i]==str1[j]):
            count +=1
print(f"The no. of duplicates are:{count}")

str1 = "python programming"
count = 0
for i in range(0,len(str1)):
    for j in range(i+1,len(str1)):
        if (str1[i]==str1[j]):
            count +=1
print(count)

"""QUESTIONS:-
1. WAP to check a string is palindrome or not
2. WAP to check a string is anagram or not.
"""

# Commented out IPython magic to ensure Python compatibility.
# %whos

"""* Palindrome number"""

str = input("Enter the string:")
rev_str = ""
n = len(str)
for i in range(n-1,-1,-1):
    rev_str += str[i]
if(rev_str == str):
    print(f"The string is Palindrome.")
else:
    print(f"The string is not Palindrome.")

"""# Lists"""

x = [19,10.5,False,"python",(4+3j)]
x.append(45)
print(x)
print(type(x))

"""Functions in List."""

#ADDING ELEMENTS IN LIST USING THREE DIFFERENT FUNCTIONS.
lst = [10,20,30]
#using append function--> add the element at the end of list.
print("Before append function:",lst)
lst.append(40)
lst.append(50)
print("After append function.",lst)
#using insert function--> add the element at the given position.
lst.insert(2,60)
print("After insert function.",lst)
#using extend function-->adds iterables
lst1 = [70,80,90]
lst.extend(lst1)
print("After using extend function.",lst)

"""Functions to remove the data from list"""

lst = [10,20,30,40,50,50,60,70]
print("Before delete function:",lst)
#using remove function--> Delete the specific element.
lst.remove(50)
print("After remove function:",lst)

#using pop()--> deletes the data from the end.
lst.pop()
print("After pop function:",lst)

#using clear()--> delete all the data from list.
lst.clear()
print("List after clear function",lst)

"""More important Functions for arranging the list."""

lst = [1,4,53,6,3,9]
print("Before sorting:",lst)

#using sort()--> used to sort the list in increasing order.
lst.sort()
print("After sorting:",lst)

#using reverse ()--> used to reverse the list.
lst.reverse()
print("After reverse function",lst)

lst = [1,1,1,1,1,1,2,2,2,3,4,5,6,1,2]
print(lst.count(1)) # gives the freq of any specific number.
print(lst.count(2))
print(lst.count(3))
print(lst.count(4))
print(lst.count(5))

"""Taking list from user"""

#WAP to create a list.
size = int(input("Enter the size of the list:"))
lst = []
for i in range(size):
    elem = int(input("Enter the element:"))
    lst.append(elem)
print(lst)

#WAP to create a 2D list.
row = int(input("Enter the row size:"))
col = int(input("Enter the column size:"))
lst = [[i for i in range(5)]]
for i in range(row):
    for j in range(col):
        ele = int(input("Enter the element:"))
        lst.append(ele)
print(lst)

"""1. WAP to FIND THE LENGTH OF THE GIVEN LIST."""

lst = [1,2,3,4,5,6]
# n = len(lst)
count = 0
for i in lst:
    count +=1
print(count)

"""2. WAP to calculate the sum of all the elements in the list.

"""

size = int(input("Enter the size of list:"))
lst =[]
sum = 0
for i in range(size):
    ele = int(input("Enter the elements:"))
    lst.append(ele)
#Approach 1:
for j in lst:
    sum = sum + j
print(sum)

"""SETS IN PYTHON"""

#ADD AND UPDATE FUNCTION.
set1 = {1,2,3,4,5,6}
print("Before add method:",set1)
#using add method-->
set1.add(10)
print("After add method:",set1)

#Using update()--> adds iterable.
set2 = {20,21,22}
set1.update(set2)
print("After update function:",set1)

set1 = {1,1,2,2,3,4,3,1,1,2}
print(set1)
#there can be no duplicates.

set1 = {1,4,2,5,7,9}
print(set1)
#always gives data in sorted order.

set1 = {1,5,8,9,3,4}

set1.remove(8)
print(set1)

set1.discard(3)
print(set1)

set1.clear()
print(set1)

set1 = {1,2,3,4}
set2 = {3,4,5,6,7}
set1.union(set2)

set1.difference(set2)

set1.symmetric_difference(set2)

set1.intersection(set2)

"""1. [ ]--> list
2. { }-->Dictionary
3. ( )--> tuple
"""

size = int(input("Enter the size:"))
my_set = set()
for i in range(size):
    ele = int(input("Enter the elements :"))
    my_set.add(ele)
print(my_set)

"""3. WAP to remove all occurance of a specific elements."""

size = int(input("Enter the size:"))

lst=[]
new_lst=[]
for i in range(size):
    ele = int(input("Enter the element:"))
    lst.append(ele)

key = int(input("Enter the element to be removed"))
for i in lst:
    if (key!=i):
        new_lst.append(i)
print(new_lst)

"""4. WAP when given 2 lists find the common elements in btw."""

lst1 = [2,3,4,5,6,1]
lst2 = [3,4,6,7,9,8,2,10]
newlst = []
for i in lst1:
    for j in lst2:
        if(i==j):
          newlst.append(j)
print(newlst)

"""5. WAP where you have given a list of words count the freq of each word"""

lst = ["apple","is","red","an","apple","a","day","keeps","doctor","away"]
j=1
while(j<len(lst)):
    count = 1

    for i in range(j+1,len(lst)):
      if(lst[j]==lst[i]):
         count += 1
    print(lst[j]," ",count)
    j+=1

"""* ANAGRAM PROBLEM"""

#USING LIST METHOD.
word1 = input("Enter the first word: ")
word2 = input("Enter the second word: ")


new1 = list(word1)
new2 = list(word2)
new1.sort()
new2.sort()

# print(new1)
# print(new2)
if new1 == new2:

    print(f"The words {word1} and {word2} are anagrams.")
else:
     print(f"The words {word1} and {word2} are not anagrams.")

word1 = input("Enter the first word:")
word2 = input("Enter the second word:")
newWord1 = sorted(word1)
newWord2 = sorted(word2)
if newWord1 == newWord2:
    print(f"The words {word1} and {word2} are anagrams.")
else:

    print(f"The words {word1} and {word2} are not anagrams.")

"""# OOP's in Python"""

#Rule for defining a class.
#class ClassName:
class Student:
     clg = "Global"

class Car:
    wheels = 4

    def __init__(self,color):
      print("The address from self:",self)
      self.color = color
    def disp(self):
        print(self.color)

c1 = Car("black")
print("Address from object",c1)
c2 = Car("Chocolate")
print("Address from",c2)
print(c1.wheels)
c1.disp()
print(c2.wheels)
c2.disp()

"""* WAP to create a class student with attributes id,name,college and display all the attributes of the particular student details."""

class Student:
    def __init__(self,name,id,clg):
        self.name = name
        self.id = id
        self.clg = clg

    def disp(self):
            print("The name of student is:",self.name)
            print("The id of student is:",self.id)
            print("The college of student is:",self.clg)
s1 = Student("Raju",2,"global")
s2 = Student("shubhi",3,"global")
s3 = Student("vedant",4,"global")
s4 = Student("cheenu",5,"global")
s5 = Student("jatin",6,"global")
s1.disp()
s2.disp()
s3.disp()
s4.disp()
s5.disp()

"""WAP to create a class Animal with properties type,color,num of legs,to disp its behaviour eats,walk,sleep"""

class Animal:
    def __init__(self,type,color):
        self.type = type
        self.color = color

    def disp(self):
        print("The type is:",self.type)
        print("The color is:",self.color)

tiger = Animal("Carnivore","yellow")
dog = Animal("Omnivores","white")
dog.disp()
tiger.disp()

"""Inheritence in python"""

class A:
    def disp(self):
        print("Display A")

class B(A):

    pass

objB = B()
objB.disp()
objA = A()
objA.disp()

class GrandFather:
    def property(self):
        print("cash+land+gold")

class Father(GrandFather):
    pass


class Son(Father):
    pass


class GrandSon():
    pass

s = Son()
s.property()
f = Father()
f.property()
gf = GrandFather()
gf.property()
gs = GrandSon()
gs.property()

"""* Multilevel Inheritence"""

class Animal:
    def eat(self):
        print("Eating")
class Cow(Animal):
    def walk(self):
        print("Cow is walking")
class Tiger(Animal):
    def run(self):
        print("Tiger Running")

class Bear(Animal):
    def sleep(self):
        print("Bear sleeping")
c = Cow()
c.eat()
c.walk()

"""* Multiple Inheritence"""

class Animal:
    def eat(self):
        print("Eating")

class Bird:
    def fly(self):
        print("Flying")

class X(Animal,Bird):
    pass

x1 = X()
x1.fly()
x1.eat()

"""* Method OverRiding"""

class Parent:
    def property(self):
        print("cash+land+gold")
    def marry(self):
        print("Trisha")

class Child(Parent):
    def marry(self):
        print("Sam")

c = Child()
c.property()
c.marry()

"""* Encapsulation"""

class Bank:
    def __init__(self,balance):
        self.__balance = balance  #_ using this it became protected.
        #__ defines private.

objBank = Bank(1000)
print(objBank.balance)

def disp(x):
    for i in range(x):
        return i

print(disp(5))

def disp(start,end):
    for i in range(start,end+1):
        print(i)
    pass
disp(11,16)

# def disp(*args)
#taking multiple args as input.
#def __del__() destructor

"""WAP to create a class Animal with properties type,color,num of legs,to disp its behaviour eats,walk,sleep"""

class Animal:
    def __init__(self,type,color):
        self.type = type
        self.color = color

    def disp(self):
        print("The type is:",self.type)
        print("The color is:",self.color)

class Dog(Animal):
    def eat(self):
     print("the dog Is eating Biscuit.")
    def walk(self):
        print("The dog is walking.")

class tiger(Animal):
    def eat(self):
     print("the tiger Is eating Flesh.")
    def run(self):
        print("The tiger is running")

t = tiger(Animal,'Yellow')
t.disp()
t.eat()
t.run()
d = Dog(Animal,'White')
d.disp()
d.eat()
d.walk()

"""1. Bank Account System - You are designing a bank account management system. Each account has an account holder's name,balance, and account type (Savings/Current)
2. Use inheritance to create a SavingsAccount and CurrentAccount class from a common BankAccount class.
Implement polymorphism for a method calculate_interest() that computes interest differently for savings and current accounts.
Ensure account numbers are unique for each object using a class attribute.
Can you write a program to demonstrate this?
"""

class Bank:

    def __init__(self,name,bal,accType):
        self.name = name
        self.bal = bal
        self.accType = accType

    def disp(self):
        print(f"The name of candidate is:",self.name)
        print(f"The Balance of candidate is:",self.bal)
        print(f"The Account Type of candidate is:",self.accType)

    def Calculate_Interest(self,prin,time,rate):
           # Interest = P * R * T,
            self.prin = prin
            self.time = time
            self.rate = rate
            self.Int = Int
            Int = prin*rate*time
            print(f"The Interest calculated is:{Int}")
c1 = Bank("Jatin",45700000,"Savings")
c1.disp()
c1.Calculate_Interest(1000,5,4)

def add(x,y):
    return x+y
def add(x,y,z):
    return x+y+z
res = add(5,6,1)
print(res)

def add(*args):
    res = 0
    for i in args:
        res += i
    return res

finalValue = add(3,4,5,6,1)
print(finalValue)

def add(*args):
    res = 0
    for i in args:
        res += i
    return res

finalValue = add(3,4,5,6,1)
print(finalValue)

def Student(**kwargs):
    for name,id in kwargs.items():
      print(f"{name}:{id}")

s1 = Student(name = "Ramu",id = 4)
s2 = Student(id = 5,name = "Raj")
# s3 = Student("uvaish",8)

"""# Lambda Function"""

res = lambda x,y:x*y
print(res(3,4))

even = lambda num:num%2 == 0
print(even(23))

"""WAP to find product of 4 numbers and check whether the result is multiple of 5 or not."""

pro = lambda a,b,c,d:a*b*c*d
d = pro(1,5,2,1)
chk = lambda d:d%5==0
print(d)
print(chk(d))

def add(x,y,operation):
    return operation(x,y)

res = add(5,6,lambda x,y:x+y)
print(res)

def add(x,y,operation1,operation2):
    return operation1(x,y),operation2(x,y)

res = add(5,6,lambda x,y:x+y,lambda x,y:x*y)
print(res)

"""create a function that has 2 function in it even and odd return the o/p for a number in form of tuples."""

def Number(x,even,odd):
    return even(x),odd(x)

res = Number(24,lambda x:x%2==0,lambda x:x%2!=0)
print(res)

my_lst = [1,2,3,4]
my_lst2 = list(map(lambda x:x**2,my_lst))
print(my_lst2)

"""WAP a program to create a list of 5 numbers and return their remainders after dividing it by 2 in form of list."""

size = int(input("Enter the size of list:"))
lst = []
for i in range(size):
    ele = int(input(f"Enter the {i}th elements of list:"))
    lst.append(ele)

lst2 = list(map(lambda x:x%2,lst))
print(lst2)

lst = [1,2,3,4]
lst2 = list(filter(lambda x:x%2==0,lst))
lst2

size = int(input("Enter the size of list:"))
lst = []
for i in range(size):
    ele = int(input(f"Enter the {i}th elements of list:"))
    lst.append(ele)

lst2 = list(filter(lambda x:x%3==0,lst))
lst2

from functools import reduce
lst = [1,2,3,4,5]
lst2 = reduce(lambda x,y:x*y,lst)
lst2

"""# Generator in python

"""

def disp(x):
    for i in range(1,x+1):
        yield i

res = disp(5)
print(next(res))
print(next(res))
print(next(res))
print(next(res))

def even(n):
    for i in range(1,n+1):
        if(i%2==0):
            yield i
res = even(10)

for i in even(10):
    print(i)

"""# Most important concept of python Regular Expression Regex

* wap to check characters starting from a ending with b.
"""

# . used to ignore the btw characters.
import re
res = re.findall(r'a.b','abc adb cvb aeb abcdefb')
print(res)

"^ checks whether the str contains the starting word as given in function."
import re
res = re.findall(r'^Hello','Hello worldHello hi hiworld Hello World')
print(res)

"$ checks whether the str contains the starting word as given in function."
import re
res = re.findall(r'Hello$','Hello worldHello hi hiworld Hello')
print(res)

'*'
import re
res = re.findall(r'ca*t','cat caaat caat cbt taac,ct')
print(res)

'+'
import re
res = re.findall(r'cat','cat caaat caat cbt taac,ct')
print(res)

'?'
import re
res = re.findall(r'ca?t','cat caaat caat cbt taac,ct')
print(res)

'{n}'
import re
res = re.findall(r'a{1}','cat caaat caat cbt taac,ct')
print(res)

'{n,}'
import re
res = re.findall(r'a{2,}','cat caaat caat cbt taac,ct')
print(res)

'{n,m}'
import re
res = re.findall(r'a{1,3}','cat caaat caat cbt taac,ct')
print(res)

'[]'
import re
res = re.findall(r'[caa]','cat caaat caat cbt taac,ct')
print(res)

'\d'
import re
res = re.findall(r'\d+','124 cat caaat caat cbt 45 taac,ct')
print(res)

"""# Dictionary

"""

#syntax
#dict = {key1:value1,key2:value2:key3:value3......,keyN:valueN}

student = {
    "name":"aman",
    "age":21,
    "course":"AI/ML"
}
# student["address"]="Jabalpur"
student["age"]=16
print(student)
print(student["name"])
print(student.get("name"))
#print(student["address"])
print(student.get("address"))
print(student.get("address","not")) #most Preferable.
print(student.get("name","Not Available")) #most Preferable.

student.pop("course")

print(student)

del student["age"]
print(student)

student.popitem()
student.clear()
print(student)

dict = {'a':1,'b':2,'a':1,'c':3,'d':4,'e':5,'b':6}
for key in dict:
    print(key)

for value in dict.values():
    print(value)

for key,value in dict.items():
    print(f"{key}:{value}")

"""* WAP to count te frequency of word?"""

word = "Hello Java Hello Python"
word_count ={}

for words in word.split():
    word_count[words] = word_count.get(words,0)+1

print(word_count)

str = "a,b,a,c,b,d,a"
dict = {}
for i in str.split(","):
    dict[i] = dict.get(i,0)+1

print(dict)
print(dict['a'])

"""* WAP to print the majority element in the list."""

lst = [1,2,3,2,2,2,2,1,3,4,1,2,2,2,2,2,2]
n = len(lst)
dict = {}

for i in lst:
    dict[i]=dict.get(i,0)+1
for key,value in dict.items():
    if(value>n//2):
        print(key)
        break

"""* majority 2 = WAP to find the majority element."""

lst = [1,2,3,2,2,2,2,2,2,2,2,2,2,1,3,4,1,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,44,4,4,4,4]
n = len(lst)
dict = {}
lst1 =[]

for i in lst:
    dict[i] = dict.get(i,0)+1

for key,value in dict.items():
    if(value>n//3):
        lst1.append(key)


print(lst1)

"""* WAP to count the frequency of characters in a given string"""

word = "remmember"
word_count ={}

for words in word:
    word_count[words] = word_count.get(words,0)+1

print(word_count)

"""# Dictionary Comprehension"""

dict = {1:1,2:2,3:3,4:4}
for key,value in dict.items():
    dict[key] = value**2

for key,value in dict.items():
    print(f"{key}:{value}")

dict = {x:x**2 for x in range(1,5)}
print(dict)

"""* WAP to swap key and values"""

dict = {'a':1,'b':2,'c':3,'d':4}
dict1 ={}
for key,value in dict.items():
     print(f"{value}:{key}")
print(dict)

dict = {'a':1,'b':2,'c':3,'d':4}
dict1 ={}

for key,value in dict.items():
    dict1[value]=key

print(dict1)

"""* WAP to find common keys into two dictionaries"""

a = {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}
b = {'abc':454,'b':343,'cds':342,'d':454,'ewe':523,'fhg':611,'e':21}
lst = []
for keys,value in a.items():
    for i,j in b.items():
        if(keys==i):
         lst.append(keys)
print(lst)

"""# List Comprehension"""

n = int(input("Enter the size of list:"))
lst = [int(input("Enter the element:")) for i in range(n)]
print(lst)

row = int(input("Enter the number of rows:"))
col = int(input("Enter the number of columns:"))
lst = [[int(input("Enter the element:")) for i in range(col)]for j in range(row)]
print(lst)

"""* WAP to create two matrix and find the addition of the matrix."""

row1 = int(input("Enter the number of rows1:"))
col1 = int(input("Enter the number of columns1:"))
lst1 = [[int(input("Enter the element:")) for i in range(col1)]for j in range(row1)]
print(lst1)
row2 = int(input("Enter the number of rows2:"))
col2 = int(input("Enter the number of columns2:"))
lst2= [[int(input("Enter the element:")) for i in range(col2)]for j in range(row2)]
print(lst2)
lst = [[lst1[i][j] + lst2[i][j] for j in range(len(lst1[0]))]for i in range(len(lst1))]
print("The sum of two lists are:",lst)

"""# Join Function
->To convert the list into the string.
"""

str = "Hi, welcome to the python classes"
lst = str.split()
lst.reverse()
str2= " ".join(lst)
print(lst)
print(str2)

"""# *Introduction to Pandas and Numpy*"""

import numpy as np
import pandas as pd
print(numpy.__version__)
print(pandas.__version__)

import numpy as np
lst = np.array([1,2,3,4,5])
print(lst)

row = int(input("Enter the number of rows:"))
col = int(input("Enter the number of columns:"))
lst = [[int(input("Enter the element:")) for i in range(col)]for j in range(row)]
arr = np.array(lst)
print(arr)

import random
arr = np.zeros((2,2))
print(arr)
arr2 = np.ones((2,2))
print(arr2)

arr3 = np.random.rand(2,2)
print(arr3)

arr = np.arange(1,16,2)
print(arr)

arr = np.linspace(1,2,6) #Takes in 6 equal fragments.
print(arr)

arr = np.linspace(1,2,3) #Takes in 6 equal fragments.
print(arr)

arr = np.array([1,2,3,4,5])
print(arr+5)
print(arr*2)

arr = np.array([1,2,3,4])
arr1 = np.array([6,6,7,8])
print("The sum of two arrays:",arr+arr1)
print("The product of two arrays:",arr*arr1)

# row1 = int(input("Enter the number of rows1:"))
col1 = int(input("Enter the number of columns1:"))
lst1 = [[int(input("Enter the element:")) for i in range(col1)]for j in range(row1)]
print(lst1)
row2 = int(input("Enter the number of rows2:"))
col2 = int(input("Enter the number of columns2:"))
lst2= [[int(input("Enter the element:")) for i in range(col2)]for j in range(row2)]
arr = np.array(lst1)
arr1 = np.array(lst2)
print(lst2)
print("The sum of 2 arrays are:",arr+arr1)
print("The sum of 2 arrays are:",arr*arr1)

arr = np.array([10,100,1000])
print(np.sqrt(arr))
print(np.sin(arr))
print(np.log(arr)) #Base 2(natura log)

arr = np.array([1,2,3,4,5,6,7])
print(np.mean(arr))
print(np.std(arr)) #mean/2.
print(np.sum(arr))
print(arr[arr>3])

"""* WAP to create a numpy array of numbers from 1-9 and reshape it into a 3X3 matrix"""

# col1 = int(input("Enter the number of columns1:"))
# lst1 = [[int(input("Enter the element:")) for i in range(col1)]for j in range(row1)]
# print(lst1)
# row2 = int(input("Enter the number of rows2:"))
# col2 = int(input("Enter the number of columns2:"))
# lst2= [[int(input("Enter the element:")) for i in range(col2)]for j in range(row2)]

#1st Approach.
# lst = [x for x in range(1,10)]
arr = np.arange(1,10).reshape(3,3)
print(arr)

#2nd approach.
lst = [x for x in range(1,10)]
arr = np.array(lst).reshape(3,3)
print(arr)

"""* WAP to find the max and min value in an array.
  
"""

lst = [x for x in range(1,10)]
# arr = np.min(lst)
# arr1 = np.max(lst)
print("The minimum element is:",np.min(lst))
print("The maximum array is",np.max(lst))

"""* WAP to find the transpose of the matrix and inverse."""

arr = np.array([[1,2],[3,4]])
print(np.transpose(arr))
det = np.linalg.det(arr)
print(det)
if(det!=0):
    inv = np.linalg.inv(arr)
    print(inv)
else:
    print("Inverse is not possible")
# print(np.linalg.inv(arr))

"""* WAP to convert 2X2 matrix into 1d)"""

arr = np.array([[1,2],[3,4]])
arr1 = np.array(arr).flatten()
print(arr1)

"""* Split a 1D array in 3 parts."""

arr = [i for i in range(1,12)]
parts = np.array_split(arr,3)
print(parts)
for i,j in enumerate(parts,1):
    print(f"part {i}:",j)

import pandas as pd
data = pd.Series([1,2,3,4,5,6,7])
print(data)

data = pd.DataFrame({
    "Name":["Aman","Prince","Priyanka","Rohit"],
     "Age":[25,24,25,26],
     "Salary" :[30000,50000,25000,40000]
})
print(data)

data = pd.read_csv(r'C:\Users\DELL\Downloads\Student_details.csv - Sheet1.csv')
print(data)

print(data.head())

print(data.tail())

print(data[data["Age"]>20])

data.drop("SGPA",axis=1,inplace=True)
print(data)

print(data.describe())

print(data.info())

print(data.columns)

x=data.groupby("Age").mean("Age")
print(x)

# merge = pd.merge(data1,data2,on = 'key_column')
# concat = pd.concat([data1,data2],axis=0)

df = pd.read_csv(r'C:\Users\DELL\Downloads\Book(Sheet1).csv')
print(df)

df.columns

df.info()

df.describe()

df.head()

data[data['Age']>20]

data[data['Branch']!='AI/ML']